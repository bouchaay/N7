Raffinage 1
R0 : Construire un routeur simple pour transmettre les paquets qu’il reçoit sur une interface d’entrée vers la bonne interface de sortie en fonction des informations qui sont stockées dans sa table de routage.
R1 : Comment construire un routeur simple pour transmettre les paquets qu’il reçoit sur une interface d’entrée vers la bonne interface de sortie en fonction des informations qui sont stockées dans sa table de routage ?

	Définition des modules
       
	Analyser et traiter les arguments passés en entrée

Argument_Count : in Integer (nombre d'arguments passés en entrée)
Size_Cache : out Integer
Politique : out Unbounded_String
Show_Stats : out Boolean
Name_File_Table : out Unbounded_String
Name_File_Package : out Unbounded_String
Name_File_Results : out Unbounded_String

Créer le fichier qui va contenir les résultats finals du routage

		Out_Result_File : out File_Type
Out_File : in T_Mode
To_string(Name_File_Results) : in String

Ouvrir le fichier paquet qui contient les destinations à router

	In_Package_File : out File_Type
In_File : in T_Mode
To_string(Name_File_Package) : in String

Ouvrir le fichier des données pour initialiser la table de routage

	Table_Data_File : out File_Type
In_File : in T_Mode
To_String(Name_File_Table) : in String
Table : Out T_LC

Traiter les paquets reçus par le routeur.

	In_Package_File : In File_Type
	Numero_ligne : Out Integer
	IP : Out T_Adress_IP
	Table : In T_LC
	Out_Result_File : In Out File_Type
Command_End : In Out Boolean
Commande : In Out unbounded_String

Fermer le fichier qui contient les résultats du routage

	Out_Result_File : in Out File_Type
Fermer le fichier des paquets à router

	In_Package_File : In Out File_Type
R2 : Comment définir les modules nécessaires pour effectuer le routage ?
	Définir le module LC

	Définir le module TABLE_ROUTAGE

	Définir le module IP_ADRESS

	Définir le module CLI

	Définir le module Exceptions
R2 : Comment analyser et traiter les arguments passés en entrée ?
	Appeler la fonction Argument_Parsing arguments suivants :

Argument_Count : In Integer
Size_Cache : Out Integer
Politique : Out Unbounded_String
Show_Stats : Out Boolean
Name_File_Table : Out Unbounded_String
Name_File_Package : Out Unbounded_String
Name_File_Results : Out Unbounded_String

R2 : Comment créer le fichier qui va contenir les résultats finals du routage?	

Appeler la fonction Create avec les arguments suivants :

	Out_Result_File : out File_Type
Out_File : in T_Mode
To_string(Name_File_Results) : in String

R2 : Comment ouvrir le fichier paquet qui contient les destinations à router?

Appeler la fonction Open avec les arguments suivants :	

	In_Package_File : out File_Type
In_File : in T_Mode
To_string(Name_File_Package) : in String

R2 : Comment ouvrir le fichier des données pour initialiser la table de routage?

	Appeler la fonction Open avec les arguments suivants :

		Table_Data_File : out File_Type
In_File : in T_Mode
To_String(Name_File_Table) : in String
	
	Initialiser la table de routage avec les données contenues dans Table_Data_File

		Table : Out T_LC



R2 : Comment traiter les paquets reçus par le routeur?

   Tant que la fin du fichier In_Package_File n'a pas été atteinte ET que la commande de fin n'a pas été détectée,     faire :

Déterminer le numéro de la ligne courante dans le fichier des paquets
		
Numero_ligne : Out Integer
In_Package_File : In File_Type

 	Récupérer l'adresse IP du fichier de paquetage

		IP : Out T_Adresse_IP
		In_Package_File : In File_Type
	
	Récupérer l'interface de sortie de l'adresse IP et l'insérer avec cette dernière dans le fichier résultat

Out_Result_File : In Out File_Type
Table : In T_LC
IP : In T_Adresse_IP

Passer à la ligne suivante du fichier des paquets

	In_Package_File : In File_Type

	Pour un erreur de type DATA_ERROR dans la ligne du paquet
		Si la commande est “TABLE”, on affiche la table de routage
		Sinon la commande est “QUIT”
			Command_End <- True
		Sinon on affiche un message d’erreur et on lève l' exception Format_Error

R2 : Comment fermer le fichier qui contient les résultats du routage?

	Appeler la fonction Close avec les arguments suivants :

		Out_Result_File : In Out File_Type

R2 : Comment fermer le fichier des paquets à router ?

	Appeler la fonction Open avec les arguments suivants :

		In_Package_File : In File_Type

R3 : Comment définir le module LC ?

	Définir les types utiles pour modéliser ce module
		
type T_Cle est generic private
		type T_Donnee est generic private
type T_Cellule est ENREGISTREMT de Cle de type T_Cle et Donnee de type T_Donnee et de Suivant de type T_LC
		type T_LC est POINTEUR qui pointe sur une cellule de type T_Cellule

Définir les sous-programmes utiles pour manipuler les listes chainees

Algorithme Initialiser(TRT: out T_LC)
Début
TRT <- NULL
Fin
Algorithme Est_Vide (TRT : T_LC) : booléen
Début
Si TRT = NULL alors
retourner vrai
Sinon
retourner faux
Fin Si
Fin

Algorithme Taille (TRT : T_LC) : entier
Début
Si TRT = NULL alors
retourner 0
Sinon
retourner 1 + Taille(TRT.Suivant)
Fin Si
Fin

Algorithme Enregistrer (TRT : in out T_LC ; Cle : T_Cle ; Donnee : T_Donnee)
Début
A <- TRT
Si A = NULL alors
TRT <- une nouvelle cellule contenant Cle, Donnee et TRT
Sinon Si A.Cle = Cle alors
Mettre à jour la donnée de la cellule courante avec Donnee
Sinon
Appeler Enregistrer(A.Suivant, Cle, Donnee)
Fin Si
Fin

Algorithme Cle_Presente (TRT : T_LC ; Cle : T_Cle) : booléen
Début
Si TRT = NULL alors
retourner faux
Sinon Si TRT.Cle = Cle alors
retourner vrai
Sinon
retourner Cle_Presente(TRT.Suivant, Cle)
Fin Si
Fin

Algorithme La_Donnee (TRT : T_LC ; Cle : T_Cle) : T_Donnee
Début
Si TRT = NULL alors
Lever une exception Cle_Absente_Exception
Sinon Si TRT.Cle = Cle alors
retourner TRT.Donnee
Sinon
retourner La_Donnee(TRT.Suivant, Cle)
Fin Si
Fin

Algorithme Supprimer (TRT : in out T_LC ; Cle : T_Cle)
Début
A <- TRT
Si TRT = NULL alors
Lever une exception Cle_Absente_Exception
Sinon Si TRT.Cle = Cle alors
TRT <- TRT.Suivant
libérer la mémoire de A
Sinon
Appeler Supprimer(TRT.Suivant, Cle)
Fin Si
Fin

Algorithme Vider (TRT : in out T_LC)
Début
Si TRT = NULL alors
libérer la mémoire de TRT
Sinon
Appeler Vider(TRT.Suivant)
libérer la mémoire de TRT
Fin Si
Fin

Algorithme Enregistrer_Fin (TRT : in out T_LC ; Cle : T_Cle ; Donnee : T_Donnee)
Début
A <- TRT
Si TRT = NULL alors
TRT <- une nouvelle cellule contenant Cle, Donnee et TRT
Sinon
Tant que A.Suivant ≠ NULL faire
A <- A.Suivant
Fin Tant Que
A.Suivant <- une nouvelle cellule contenant Cle, Donnee et A.Suivant
Fin Si
Fin

Algorithme Suppression_Haute (TRT : in out T_LC)
Début
A <- TRT
TRT <- TRT.Suivant
libérer la mémoire de A
Fin

Algorithme Element_En_Indice (TRT : T_LC ; Indice : entier) : T_Cellule
Début
Si Indice = 0 alors
retourner TRT
Sinon
retourner Element_En_Indice(TRT.Suivant, Indice - 1)
Fin Si
Fin


R3 : Comment définir le module TABLE_ROUTAGE ?

	Définir les types utiles pour modéliser ce module

Type T_Donnee est ENREGISTREMENT de Masque de type T_Adresse_IP et Destination de type Unbounded.String avec T_Cle tous deux instanciés dans le module LC

	



Définir les sous-programmes utiles pour manipuler la table de routage

Algorithme Show_Line(Cle : T_Adresse_IP, Donnee : T_Donnee)
Début
Afficher Cle
Afficher Donnee.Masque
Afficher Donnee.Destination
Aller à la ligne
Fin

Algorithme Show_Table(Table : T_LC, Line : entier)
Début
Afficher "Table : (ligne "
Afficher Line
Afficher ")"
Aller à la ligne
Pour chaque élément de Table faire
Afficher l'élément
Fin Pour
Fin

Algorithme Compare_Table(Table : T_LC, IP : T_Adresse_IP) : chaîne non bornée
Début
Déclarer Mask_IP : T_Adresse_IP
Déclarer Mask_Max : T_Adresse_IP <- 0
Déclarer Out_Interface : chaîne non bornée <- "Erreur routage"

Algorithme Compare_Line(Cle : T_Adresse_IP, Donnee : T_Donnee)
Début
Mask_IP <- IP ET Donnee.Masque
Si Mask_IP = Cle ET Donnee.Masque >= Mask_Max alors
Mask_Max <- Donnee.Masque
Out_Interface <- Donnee.Destination
Fin Si
Fin

Algorithme Browse_Table
Pour chaque élément de Table faire
Comparer_Line(élément)
Fin Pour
Retourner Out_Interface
Fin

Algorithme Initialiser_Table(Table : in out T_LC, File_Table : in out File_Type)
Début
Déclarer IP : T_Adresse_IP
Déclarer Mask : T_Adresse_IP
Déclarer Destination : chaîne non bornée
Déclarer Line_Table : T_Donnee
Initialiser(Table)
Tant que non fin de fichier(File_Table) faire
IP <- Obtenir_IP(File_Table)
Mask <- Obtenir_IP(File_Table)
Destination <- Obtenir_Ligne(File_Table)
Retirer les espaces en début et fin de Destination
Line_Table <- (Mask, Destination)
Enregistrer(Table, IP, Line_Table)
Fin Tant Que
exception
quand Fin_Erreur =>
Afficher "Trop de blanc à la fin du fichier."
null;
Fin

R3 : Comment définir le module IP_ADRESS ?

	Définir le type T_Adresse_IP pour modéliser ce module
		
		Type T_Adresse_IP est mod 2**32

	Définir les sous-programmes utiles pour manipuler ce type de donnée

Algorithme Show_IP(IP : T_Adresse_IP)
Début
Pour i allant de 0 à 2 faire
Afficher (IP / 256^(3-i) mod 256)
Afficher "."
Fin Pour
Afficher (IP mod 256)
Afficher " "
Fin

Algorithme Add_IP(File : in out File_Type, IP : T_Adresse_IP)
Début
Pour i allant de 0 à 2 faire
Ajouter (File, (IP / 256^(3-i) mod 256), 1)
Ajouter (File, ".")
Fin Pour
Ajouter (File, (IP mod 256), 1)
Ajouter (File, " ")
Fin

Fonction Get_IP(File : in out File_Type) : T_Adresse_IP
Début
Déclarer n : entier
Déclarer Lien : caractère
Déclarer IP : T_Adresse_IP <- 0
Pour i allant de 0 à 3 faire
Obtenir (File, n)
IP <- T_Adresse_IP(n) + IP*256
Si i < 3 alors
Obtenir (File, Lien)
Si Lien /= '.' alors
Afficher "Erreur de syntaxe dans l'adresse IP. Doit être '.' !"
Fin Si
Fin Si
Fin Pour
Retourner IP
Fin

R3 : Comment définir le module CLI ?

	importer le package Ada.Command_Line

implanter les procedures necessaires pour manipuler l’interface des commandes

Algorithme User_Guide
Début
Afficher "User_Guide : ./routeur_simple <options>"
Aller à la ligne
Afficher "Les options sont les suivantes :"
Aller à la ligne
Afficher " -c <taille> : Définir la taille du cache. La taille du cache est definie a 10 par defaut. Si la taille est 0, donc il n'y a pas de cache."
Aller à la ligne
Afficher " -p FIFO|LRU|LFU : Définir la politique utilisée par le cache. La valeur par défaut est FIFO."
Aller à la ligne
Afficher " -p <fichier> : Définir le nom du fichier contenant les paquets à router. Par défaut, on utilise le fichier paquets.txt."
Aller à la ligne
Afficher " -s : Afficher les statistiques (nombre de défauts de cache, nombre de demandes de route, taux de défaut de cache). C'est l'option activée par défaut."
Aller à la ligne
Afficher " -S : Ne pas afficher les statistiques."
Aller à la ligne
Afficher " -t <fichier> : Définir le nom du fichier contenant les routes de la table de routage. Par défaut, on utilise le fichier table.txt."
Aller à la ligne
Afficher " -r <fichier> : Définir le nom du fichier contenant les résultats (adresse IP destination du paquet et inter-face utilisée). Par défaut, on utilise le fichier resultats.txt."
Fin

Algorithme Argument_Parsing(Argument_Count : entier, Cache_Size : out entier, Policy : out chaîne non bornée, Stat : out booléen, Data_File_Name : out chaîne non bornée, In_Package_File_Name : out chaîne non bornée, Out_Result_File_Name : out chaîne non bornée)
Début
Déclarer Counter : entier <- 1
Déclarer Argument_Position : chaîne non bornée
Cache_Size <- 10
Policy <- "FIFO"
Stat <- vrai
Data_File_Name <- "table.txt"
In_Package_File_Name <- "paquets.txt"
Out_Result_File_Name <- "resultats.txt"
Si Argument_Count = 0 alors
Afficher_Guide_Utilisateur
Lever une exception Invalid_Command
Fin Si
Tant que Counter <= Argument_Count faire
Argument_Position <- Arguments(Counter)
Si Argument_Position = "-c" alors
Essayer
Cache_Size <- Valeur_Entière(Arguments(Counter+1))
Exception
Afficher "-c doit être suivi d'un entier. Erreur à la position " & Image_Entier(Counter+1)
Afficher_Guide_Utilisateur
Lever une exception Invalid_Command
Fin Exception
Fin Si
Si Argument_Position = "-p" alors
Policy <- Arguments(Counter+1)
Fin Si
Si Argument_Position = "-s" alors
Stat <- vrai
Fin Si
Si Argument_Position = "-S" alors
Stat <- faux
Fin Si
Si Argument_Position = "-t" alors
Data_File_Name <- Arguments(Counter+1)
Fin Si
Si Argument_Position = "-r" alors
Out_Result_File_Name <- Arguments(Counter+1)
Fin Si
Counter <- Counter + 1
Fin Tant que
Fin
	
R3 : Comment définir le module Exceptions ?

	Définir les exceptions suivantes :
	
		Invalid_Command : Exception;
		Format_Error : Exception;
		Cle_Absente_Exception : Exception;
		Liste_Vide_Exception : Exception;
		Politique_Invalide : Exception;
	
R3 : Comment initialiser la table de routage avec les données contenues dans Table_Data_File ?

	 Ouvrir le fichier Table_Data_File
		Table_Data_File : In T_File

	Utiliser la procedure Initialiser_Table avec les arguments Table et Table_Data_File
		Table : Out T_LC;
		Table_Data_File : In T_File
	Fermer le fichier Table_Data_File

R3 : Comment déterminer le numéro de la ligne courante dans le fichier des paquets ?
		
	 Numero_ligne <- Integer(Line(In_Package_File))

Numero_ligne : Out Integer
In_Package_File : In File_Type


R3 : Comment Récupérer l'adresse IP du fichier de paquetage

Appeler la fonction Get_IP definit dans le module IP_ADRESS qui return une adresse IP integer

IP <- Get_IP(In_Package_File)
			IP : Out T_Adresse_IP
			In_Package_File : In File_Type
	







R3 : Récupérer l'interface de sortie de l'adresse IP et l'insérer avec cette dernière dans le fichier résultat
	
	utiliser la fonction Put avec les arguments Out_Result_File le fichier pour enregistrer la destination finale et Compare_Table definit dans le module TABLE_ROUTAGE qui traite la ligne du paquet et retourne l’interface finale.
	Put(Out_Result_File, Compare_Table(Table, IP))

Out_Result_File : In Out File_Type
Table : In T_LC
IP : In T_Adresse_IP
	

 R3 : Fermer le fichier qui contient les résultats du routage

	Appeler la fonction Close qui ferme un fichier

		Close(Out_Result_File)
Out_Result_File : in Out File_Type

R3 : Fermer le fichier des paquets à router

Appeler la fonction Close qui ferme un fichier

	Close(In_Package_File)
		In_Package_File : In Out File_Type
	

 
	



	

	
		
	
	






Raffinage 2
R0 :   Construire un routeur avec le cache  en utilisant les politiques FIFO, LRU et LFU. 
R1 : Comment Construire un routeur avec le cache  en utilisant les politiques FIFO, LRU et LFU ? 

Définir les modules.

Parser les arguments de la ligne de commande.
                     
Créer et ouvrir les fichiers de paquetage et de résultats.

Initialiser la table de routage à partir du fichier de données.
	             
Initialiser le cache.            

Traiter des commandes du fichier de paquetage.
          		Command_End : Boolean <- False

Fermer tous les fichiers.
R2 :  Comment définir les modules ?

              Définir le module LC

	Définir le module TABLE_ROUTAGE

	Définir le module IP_ADRESS

	Définir le module CLI

	Définir le module Exceptions

               Définir le module cache LL


R2 :  Comment parser les arguments de la ligne de commande ?
	
          Appeler la fonction Argument_Parsing arguments suivants :
                         Argument_Count : in Integer (nombre d'arguments passés en entrée)
                            Size_Cache : out Integer
              Politique : out Unbounded_String
Show_Stats : out Boolean
Name_File_Table : out Unbounded_String
Name_File_Package : out Unbounded_String
Name_File_Results : out Unbounded_String
R2 : Comment créer et ouvrir les fichiers de paquetage et de résultats ?

	Appeler la fonction Create avec les arguments suivants :

	Out_Result_File : out File_Type
Out_File : in T_Mode
To_string(Name_File_Results) : in String


Appeler la fonction Open avec les arguments suivants :	

	In_Package_File : out File_Type
In_File : in T_Mode
To_string(Name_File_Package) : in String
R2 : Comment initialiser la table de routage à partir du fichier de données ?

	Appeler la fonction Open avec les arguments suivants :

		Table_Data_File : out File_Type
In_File : in T_Mode
To_String(Name_File_Table) : in String
	
	Initialiser la table de routage avec les données contenues dans Table_Data_File

		Table : Out T_LC
R2 :  Comment initialiser le cache ?

Appeler la procédure Initialiser_Cache_LL avec les arguments suivants : 

              		Cache  : in out T_cache
              		Size_Cache : Integer



R2 :  Comment traiter des commandes du fichier de paquetage ?
      
                Tantque le fichier paquet n’est pas fini et commande_end = false faire :
               	Lire le numéro de ligne et l'adresse IP.
                	Vérifier si l'adresse IP est présente dans le cache. 
Si  L'adresse IP est présente dans le cache, alors on l'utilise
                              	ecrire(Out_Result_File, IP_Interface)
             		Sinon 
                        		chercher L'adresse IP dans la table de routage
                        		Ajouter cet adresse IP au cache en utilisant les politiques  
              		Finsi
	FinTq
              exception  quand Data_error =>           
             	              La ligne courante du fichier de paquetage n'est pas une adresse IP valide.
                        	Commande ← Lire(In_Package_File)
                        	Numero_Ligne ← Integer(Line(In_Package_File))
               
         	Exécuter la commande.


R2 : Comment fermer tous les fichiers ?

    Appeler la fonction Close avec les arguments suivants :
                       Out_Result_File : In Out File_Type
                       In_Package_File : In File_Type
               

  
                         
              
              


R3 : Comment definir le module CACHE_LL qui permet de manipuler  le cache du routeur ?

	Definir les types utiles pour modeliser ce modules

	Implementer les programmes necessaire pour manipuler ce module

Algorithme Initialiser_Cache_LL (Cache : T_Cache; Size_Max : entier)
Début
Cache.L := NULL;
Cache.Size_Max := Size_Max;
Cache.N_Appels := 0;
Cache.N_Defauts := 0;
Fin

Algorithme Afficher_Statistiques_LL (Cache : T_Cache)
Début
Ecrire("Nombre d'appels : ", Cache.N_Appels);
Nouvelle_Ligne;
Ecrire("Nombre de défauts : ", Cache.N_Defauts);
Si Cache.N_Appels = 0 alors
Ecrire("Taux de défauts incalculable.");
Sinon
Ecrire("Taux de défauts : ", (Cache.N_Defauts / Cache.N_Appels));
Fin Si
Fin

Algorithme Afficher_Cache_LL (Cache : T_Cache; Politique : chaine)
Procédure Interne Afficher_Liste (Cle: T_Adresse_IP; Donnee : T_Cellule)
Début
Afficher_IP(Cle);
Ecrire("- ", Donnee.IP_Interface);
Si Politique = "LFU" alors
Ecrire(" - ", Donnee.N_Appels_IP);
Fin Si
Nouvelle_Ligne;
Fin

Procédure Interne Afficher_Cache_Liste
Début
Pour Chaque (Cle, Donnee) dans Cache.L faire
Afficher_Liste(Cle, Donnee);Fin
Fin
Début
Si Cache.L = NULL alors
Ecrire("Cache vide");
Sinon
Ecrire("Destination - Interface");
Si Politique = "LFU" alors
Ecrire(" - Nb Appels");
Fin Si
Nouvelle_Ligne;
Afficher_Cache_Liste;
Fin Si
Fin

Algorithme Lire_Cache_LL (Cache : T_Cache; Destination : T_Adresse_IP; Politique : chaine; IP_Interface : chaine; Found : booléen)
Début
Si Cle_Présente(Cache.L, Destination) alors
Donnee := La_Donnee(Cache.L, Destination);
IP_Interface := Donnee.IP_Interface;
Cache.N_Appels := Cache.N_Appels + 1;
Found := Vrai;
Si Politique = "LRU" alors
  			Supprimer(Cache.L, Destination);
    			Enregistrer_Fin(Cache.L, Destination, Donnee);
Sinon Si Politique = "FIFO" alors 
    			Rien;
Sinon Si Politique = "LFU" alors
    			Donnee.N_Appels_IP := Donnee.N_Appels_IP + 1;
    			Enregistrer(Cache.L, Destination, Donnee);
Fin

Algorithme Ajouter_Cache_LL (Cache : T_Cache; Destination : T_Adresse_IP; IP_Interface : chaine; Politique : chaine)
Début
Cellule := T_Cellule'(IP_Interface, 0);
Min_Cellule : T_Cellule;
Min : entier;
Dest : T_Adresse_IP;
Min_Dest : T_Adresse_IP;
Enregistrer_Fin(Cache.L, Destination, Cellule);
Si Taille(Cache.L) > Cache.Size_Max alors
Si Politique = "LRU" ou Politique = "FIFO" alors
Suppression_Haute(Cache.L);
Sinon Si Politique = "LFU" alors
Element_En_Indice(Cache.L, 0, Min_Dest, Min_Cellule);
Min := Min_Cellule.N_Appels_IP;
Pour i allant de 1 à (Taille(Cache.L)-1) faire
Element_En_Indice(Cache.L, i, Dest, Min_Cellule);
Si Min_Cellule.N_Appels_IP < Min alors
Min := Min_Cellule.N_Appels_IP;
Min_Dest := Dest;
Fin Si
Fin Pour
Supprimer(Cache.L, Min_Dest);
Sinon
Lancer Politique_Invalide;
Fin Si
Sinon
Néant;
Fin Si
Fin


Algorithme Incrementer_Defauts_LL (Cache : T_Cache)
Début
Cache.N_Defauts := Cache.N_Defauts + 1;
Fin



Algorithme Taille_Cache_LL (Cache : T_Cache) : entier
Début
Retourner Taille(Cache.L);
Fin

Algorithme Est_Vide_Cache_LL (Cache : T_Cache) : booleen
Début
Retourner Est_Vide(Cache.L);
Fin

Algorithme Nb_Appels_Destination_LL (Cache : T_Cache; Destination : T_Adresse_IP) : entier
Début
Donnee : T_Cellule;
Si Cle_Présente(Cache.L, Destination) alors
Donnee := La_Donnee(Cache.L, Destination);
Retourner Donnee.N_Appels_IP;
Sinon
Retourner 0;
Fin Si
Fin



R3 : Comment  <<appeler les fonctions>> ?
   
 Argument_Parsing ( Argument_Count ,  Size_Cache ,  Politique ,Show_Stats,                      
                                     Name_File_Table, Name_File_Package, Name_File_Results )
                         
                         Create(Out_Result_File, Out_File, To_string)


         Open(In_Package_File, In_File, To_string(Name_File_Package))

                           -- Initialiser la table de routage Ã  partir du fichier de donnÃ©es.

                        Initialiser_Table(Table, Table_Data_File);
                         Close(Table_Data_File);

                             -- Initialiser le cache.
                      Initialiser_Cache_LL(Cache, Size_Cache);

                      close(Out_Result_File);
                      close(In_Package_File);







R3 : Comment lire le numéro de ligne et l'adresse IP ?

 Numero_Ligne ← Integer(Line(In_Package_File));

   IP ←  Get_IP(In_Package_File);





R3 : Comment vérifier si l'adresse IP est présente dans le cache ?
             

   	

Lire_Cache_LL(Cache, IP, Politique, IP_Interface, Found);

      Si Found = true alors
        -- L'adresse IP est présente dans le cache, donc on l'utilise.
        écrire(Out_Result_File, IP_Interface);
     sinon
        -- L'adresse IP n'est pas présente dans le cache, donc on la cherche dans la table de routage.
        écrire(Out_Result_File, Compare_Table(Table, IP));

        -- Ajouter l'adresse IP et l'interface de sortie dans le cache.
        Ajouter_Cache_LL(Cache, IP, Compare_Table(Table, IP), Politique);
   
       fin si

      New_Line(Out_Result_File);
      -- Passer Ã  la ligne suivante du fichier de paquetage.
      Skip_Line(In_Package_File);


 R3 : Comment <<Exécuter la commande>> ?
 
Si commande = "TABLE" Alors
       Show_Table(Table,Numero_ligne);
    Si Commande = To_Unbounded_String("QUIT") Alors
      Command_End ← True;
  Si Commande = To_Unbounded_String("CACHE") Alots
      Afficher_Cache_LL(Cache, Politique);
    sinon
      écrire(("Commande inconnue Ã  la ligne " & Integer'Image(Numero_ligne));
 Finsi;




 












Raffinage 3
R0 : Faire les opérations du routeur quand il s’agit d’un routeur LA avec une politique LRU.
R1 : Comment faire les opérations du routeur quand il s’agit d’un routeur LA avec une politique LRU ?
Définir le module arbre
 Définir la table.
           Type T_Table_Routage_Type EST POINTEUR SUR T_Cellule.
           Type T_Adresse_IP is mod 2**32.
           Type T_Cellule EST ENREGISTREMENT
           Destination : T_Adresse_IP
           Interface : Unbounded_String
           Suivant : T_Table_Routage
           FIN ENREGISTREMENT     
Parser les arguments de la ligne de commande.
Créer et ouvrir les fichiers de paquetage et de résultats.
Construire un arbre préfixe pour le cache.
Destination_LC : Out T_Adresse_IP  
Masque_LC : Out T_Adresse_IP
Interface_LC : Out Unbounded_String
 	Sous_Arbre_G : Out T_LA
              Sous_Arbre_D : Out T_LA
              Cache : T_LA
              Arbre : T_LA
      
Initialiser le cache.
Traiter des commandes du fichier de paquetage.
          		Command_End : Boolean <- False
Fermer tous les fichiers.
R2 : Comment définir le module arbre ?
               Définir le module arbre

               Définir le module cache LA

R2 : Comment Parser les arguments de la ligne de commande?
             Appeler la fonction Argument_Parsing arguments suivants :
                            Argument_Count : in Integer (nombre d'arguments passés en entrée)
                            Size_Cache : out Integer
              Politique : out Unbounded_String
Show_Stats : out Boolean
Name_File_Table : out Unbounded_String
Name_File_Package : out Unbounded_String
Name_File_Results : out Unbounded_String
R2 : Comment créer et ouvrir les fichiers de paquetage et de résultats ?

	Appeler la fonction Create avec les arguments suivants :

	Out_Result_File : out File_Type
Out_File : in T_Mode
To_string(Name_File_Results) : in String


Appeler la fonction Open avec les arguments suivants :	

	In_Package_File : out File_Type
In_File : in T_Mode
To_string(Name_File_Package) : in String

R2 : Comment construire un arbre préfixe pour le cache  ?
           Initialiser le module ABR_ROUTAGE
(Type T_LA , Type Unbounded_String
, Type T_Adresse_IP, Type T_Noeud, opérations sur  Arbre)
Créer Arbre à l’aide des données fournies.

R2 : Comment afficher le cache et l’initialiser?
           Appeler la procédure Initialiser_Cache_LA avec les arguments suivants : 

              		Cache  : in out T_LA
              		Size_Cache : Integer
R2 : Comment traiter des commandes du fichier de paquetage ?


              Tantque le fichier paquet n’est pas fini et commande_end = false faire :
               	Lire le numéro de ligne et l'adresse IP.
                	Vérifier si l'adresse IP est présente dans le cache. 
Si  L'adresse IP est présente dans le cache, alors on l'utilise
                              	ecrire(Out_Result_File, IP_Interface)
             		Sinon 
                        		chercher L'adresse IP dans la table de routage
                        		Ajouter cette adresse IP au cache en utilisant la politique LRU. 
              		Finsi
	FinTq
              exception  quand Data_error =>           
             		La ligne courante du fichier de paquetage n'est pas une adresse IP valide.
                        	Commande ← Lire(In_Package_File)
                        	Numero_Ligne ← Integer(Line(In_Package_File))
         	Exécuter la commande.

R2 : Comment fermer tous les fichiers ?

    Appeler la fonction Close avec les arguments suivants :
                       Out_Result_File : In Out File_Type
                       In_Package_File : In File_Type

R3 : Comment definir le module CACHE_LA qui permet de manipuler  le cache du routeur ?

	Definir les types utiles pour modeliser ces modules
              Implementer les programmes necessaire pour manipuler ce module
                          Algorithme Initialiser_Cache_LA(Cache : in out T_Cache ; Taille_Max : in Integer) 
                          Initialiser(Cache.Arbre);
                          Cache.taille ← 0;
                          Cache.Taille_Max ← Taille_Max;
                          Cache.Consultation ← 0;
                          Cache.Defauts ← 0;
                          Fin

                           Algorithme Afficher_Statistiques_LA(Cache : in T_Cache) is
                           Taux_Defauts : Float;
                           Ecrire("Taille du cache : " & Integer'Image(Cache.Consultation));
                           Ecrire("Nombre de demandes de routes : " & Integer'Image(Cache.Consultation));
                           Taux_Defauts ← Float(Cache.Defauts) / Float(Cache.Consultation);
                           Ecrire("Taux de défauts de cache : " & Float'Image(Taux_Defauts));
                          Fin

                           Algorithme Lire_Cache_LA(Cache : in out T_Cache ; Destination : in T_Adresse_IP ;    IP_Interface : out Unbounded_String ; Found : out Boolean) is
                           Traiter(Cache.Consultation, Destination, IP_Interface, Found, Cache.Arbre);
                           Cache.Consultation ← Cache.Consultation + 1;
                           Si not Found Alors
                           Cache.Defauts ← Cache.Defauts + 1;
                           Sinon
                                Si Cache.Taille = Cache.Taille_Max Alors
                                      Supprimer(Cache.Consultation, Cache.Arbre);
                               Sinon
                                     Cache.Taille ← Cache.Taille + 1;
                               Finsi;
                          Enregistrer(Cache.Consultation, Destination, IP_Interface, Cache.Arbre);
                          Finsi;
                          Fin;

                           Algorithme Afficher_Cache_LA(Cache : in T_Cache) 
                           Afficher(Cache.Arbre);
                           Fin;
                          
                         Fonction taille(Cache : in T_Cache) retourne entier
                         Si Cache = Null Alors
        	                retourner  0;
                     Sinon
        	              retourner 1 + Taille(Cache.All.Gauche) + Taille(Cache.All.Droite);
                      Finsi
                    Algorithme Supprimer(Cache : inT_Cache) 
                      Minimum : integer ← Courant;
                      Cle : T_Adresse_IP :←  0;
                     Bit : T_Adresse_IP;
                  A_Detruire : T_LA
       	     Si Cache = Null Alors
            	        Null;
        	    Sinon
            	          Si Cache.All.Gauche = Null Et Cache.All.Droite = Null Alors
                	Si Minimum > Cache.All.Consultation Alors
                    	        Minimum ←  Cache.All.Consultation;
                    	        Cle ←  Cache.All.Cle;
         	         Sinon
                    	        Null;
                      Finsi;
            	Sinon
                    Minimum_Recursion(Cache.All.Gauche , Arg , Minimum , Cle);
                    Minimum_Recursion(Cache.All.Droite , Arg , Minimum , Cle);
   	 Finsi;
      Finsi;
        	Si Cache.All.Gauche = Null Et Cache.All.Droite = Null Alors
            	           Free(Cache);
        	Sinon
           	         Bit := Cle / 2**31;
           	         Si Bit = 1 Alors
                                  Supprimer_Par_Cle(Cache.All.Droite , Cle * 2);
                      Sinon
                                 Supprimer_Par_Cle(Cache.All.Gauche , Cle * 2);
           	      Finsi;
           	      Si Cache.All.Gauche = Null Et Cache.All.Droite = Null Alors
                	Free(Arbre);
           	   SinonSi Cache.All.Gauche /= Null Et Cache.All.Droite = Null Alors
                	A_Detruire := Cache;
                	Cache := Cache.All.Gauche;
                	Cache.All.Cle := Cache.All.Cle / 2;
                	Free(A_Detruire);
               SinonSi Cache.All.Gauche = Null Et Cache.All.Droite /= Null Alors
                	A_Detruire := Cache;
                	Arbre := Cache.All.Droite;
                	Arbre.All.Cle := Cache.All.Cle / 2;
                	Free(A_Detruire);
            	 Sinon
               	Null;
            	Finsi;
          Finsi;
      Finsi;
 Finsi;
Algorithme traiter (Courant : in Integer ; Cle : in T_Adresse_IP  ; Valeur : out Unbounded_String ; Found : out Boolean ; Cache : in out T_Cache);
    Algorithme Traiter_Recursif(Courant : in Integer ; Cle : in T_Adresse_IP ; Valeur : out Unbounded_String ; Found : out Boolean ; Arbre : in T_Cache) 
        	Bit : T_Adresse_IP;
              	Si Cache.All.Cle = Cle Alors
                	Valeur ← Cache.All.Valeur;
                	Found ← True;
                	Cache.All.Consultation ← Courant;
            	Sinon
                	Valeur ← To_Unbounded_String("Introuvable");
                	Found ← False;
            	Finsi;
	        Si Cache = Null Alors
                	Valeur ← To_Unbounded_String("Introuvable");
            	              Found ← False;
        	SinonSi Cache.All.Droite = Null Et Cache.All.Gauche = Null Alors
                            Comparer_Donnees(Courant , Cle , Valeur , Found , Cache);
        	Sinon
            	          Bit := Cle / 2**31;
            	         Si Bit = 1 Alors
              	                 Traiter_Recursif(Courant , Cle * 2 , Valeur , Found , Cache.All.Droite);
            	        Sinon
                               Traiter_Recursif(Courant , Cle * 2 , Valeur , Found , Cache.All.Gauche);
            	         Finsi;
                	   Null;
            	Finsi;
        Finsi;
        Si Cache = Null Alors
        	Valeur := To_Unbounded_String("Arbre vide");
        	Found := False;
        Sinon
            Traiter_Recursif(Courant , Cle , Valeur , Found , Cache);
        Finsi;
Algorithme Enregistrer (Courant : in Integer ; Cle : in T_AdresseIP ; Valeur : in Unbounded_String ; Cache : in out T_Cache);
 	Bit : T_Adresse_IP;
 	Copie : T_LA;
   	Si Cache = Null Alors
        	         Cache := new T_Noeud'(Cle, Valeur, Courant, null, null);
   	SinonSi Cache.All.Droite = Null Et Cache.All.Gauche = Null Alors
        	       Bit := Cache.All.Cle / 2**31;
        	      Copie := Cache;
        	       Cache := new T_Noeud'(0, To_Unbounded_String("Invalide"), 0, null, null);
        	        Si Bit = 1 Alors
            	                Cache.All.Droite := Copie;
        	        Sinon
            	             Cache.All.Gauche := Copie;
        	       Finsi;
    	 Sinon
        	     Bit := Cle / 2**31;
        	    Si Bit = 1 Alors
            	         Enregistrer(Courant , Cle * 2 , Valeur , Cache.All.Droite);
        	    Sinon
            	      Enregistrer(Courant , Cle * 2 , Valeur , Cache.All.Gauche);
        	Finsi;
         Finsi; 
              Algorithme Afficher(Cache : in T_Cache);
        	Algorithme Afficher_Recursif(Cache : in T_Cache; Chemin : in T_Adresse_IP; Profondeur : in Integer)
        	Bit : T_Adresse_IP;
        	Si Cache = Null Alors
            	       Null;
        	SinonSi Cache.All.Droite = Null Et Cache.All.Gauche = Null Alors
           	        Show_IP(Chemin * 2**profondeur + Cache.All.Cle / 2**profondeur);
           	        Ecrire(" " & To_String(Cache.All.Valeur));
        	Sinon
            	       Bit := Cache.All.Cle / 2**31;
            	       Si Bit = 1 Alors
                              Afficher_Recursif(Cache.All.Droite , Chemin + 2**(31-profondeur) , Profondeur + 1);
            	      Sinon
                         Afficher_Recursif(Cache.All.Gauche , Chemin , Profondeur + 1);
                    Finsi;
        	Finsi;
    	Afficher_Recursif(Cache , 0 , 0);



R3 : Comment  <<appeler les fonctions>> ?
   
 Argument_Parsing ( Argument_Count ,  Size_Cache ,  Politique ,Show_Stats,                      
                                     Name_File_Table, Name_File_Package, Name_File_Results )
                           Create(Out_Result_File, Out_File, To_string)
            Open(In_Package_File, In_File, To_string(Name_File_Package))
                           Initialiser_Table(Table, Table_Data_File);
                           Close(Table_Data_File);
                           Initialiser_Cache_LA(Cache, Size_Cache);
                          close(Out_Result_File);
                          close(In_Package_File);


R3 : Comment lire le numéro de ligne et l'adresse IP ?

                         Numero_Ligne ← Integer(Line(In_Package_File));

                          IP ←  Get_IP(In_Package_File);

 R3 : Comment <<Exécuter la commande>> ?
 
Si commande = "TABLE" Alors
       Show_Table(Table,Numero_ligne);
    Si Commande = To_Unbounded_String("QUIT") Alors
      Command_End ← True;
  Si Commande = To_Unbounded_String("CACHE") Alots
      Afficher_Cache_LA(Cache, Politique);
    sinon
      écrire(("Commande inconnue Ã  la ligne " & Integer'Image(Numero_ligne));
 Finsi;


